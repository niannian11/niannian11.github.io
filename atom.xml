<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://niannian11.github.io</id>
    <title>Gridea</title>
    <updated>2020-03-25T11:57:52.189Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://niannian11.github.io"/>
    <link rel="self" href="https://niannian11.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://niannian11.github.io/images/avatar.png</logo>
    <icon>https://niannian11.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[力扣 买股票的最佳时机]]></title>
        <id>https://niannian11.github.io/post/li-kou-mai-gu-piao-de-zui-jia-shi-ji/</id>
        <link href="https://niannian11.github.io/post/li-kou-mai-gu-piao-de-zui-jia-shi-ji/">
        </link>
        <updated>2020-03-25T11:54:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="给定一个数组它的第-i-个元素是一支给定股票第-i-天的价格">给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</h1>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。<br>
注意：你不能在买入股票前卖出股票。</p>
<pre><code class="language-C++"> class Solution {
public:
    int maxProfit(vector&lt;int&gt;&amp; prices) 
    {
        if (prices.empty())
			return 0;
		//试了好几次都不对，因为没有考虑全面
		int size = prices.size();
		int min=0;//谷值和峰值的下标
		int diff, pro = 0;//差值和最大利润
		for (int i = 0; i &lt; size; i++)//i代表卖出的点
		{
			if (prices[min] &gt; prices[i])
				min = i;//如果后面没有找到比它更小的，就一直比较后面与它的差值
			            //如果找到比它更小的，就把这个还小的赋值，继续比较
			diff = prices[i] - prices[min];
			pro = diff &gt; pro ? diff : pro;//选择差值最大的给pro
		}
		return pro;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[力扣 爬楼梯]]></title>
        <id>https://niannian11.github.io/post/li-kou-pa-lou-ti/</id>
        <link href="https://niannian11.github.io/post/li-kou-pa-lou-ti/">
        </link>
        <updated>2020-03-24T13:13:36.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-C++">#include&lt;iostream&gt;
using namespace std;
class Solution {
public:
	int climbStairs(int n)
	{
		if (n&lt;3)
		{
			return n;
		}
		else
		{
			int n1 = 1;
			int n2 = 2;//斐波那契数列从第3个以后开始，因为前2个都是返回自己
			int res = 0;//用来计算当前的值，当前的值为前两个之和
			for (int i = 0; i&lt;n - 2; i++)//减去2的原因是因为要从第三个开始
			{
				res = n1 + n2;
				n1 = n2;
				n2 = res;
			}
			return res;
		}
	}
};
void test01()
{
	Solution s1;
	cout&lt;&lt;s1.climbStairs(3);
}
int main()
{
	test01();
	system(&quot;pause&quot;);
	return 0;
}
</code></pre>
<hr>
<p>分类计数原理，也就是加法原理：如果完成一件事的方法分为（不重不漏的）两类，第一类有x种方法，第二类有y种方法，那么完成这件事的方法共有x+y种。这个很好理解，谁都想得通。 到本题，假设走到第n层楼梯的方法数为f(n)。走到第n层楼梯的方法可以分为两类：第一类，先走到第n-1层，然后走一级楼梯，这类方法有f(n-1)种；第二类，先走到第n-2层，然后走两级楼梯，这类方法有f(n-2)种。仔细想想，这两类方法覆盖了到达第n层楼梯的所有方法，且彼此没有重复，那么根据加法计数原理：f(n)=f(n-1)+f(n-2)</p>
]]></content>
    </entry>
</feed>